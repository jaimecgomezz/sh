#!/usr/bin/env sh

#-----------------------------
# @jaimecgomezz
#
# Simple Pomodoro manager
#
# Requires:
#   - nsl (custom)
#   - ntf (custom)
#------------------- protected
export PNAME="${PNAME:-$(ps --no-headers -o comm $PPID)}"
#------------------------ vars
DB="${HOME}/pomos"
POMOS=${POMOS:-4}    # Number of focus lapses
WORKL=${WORKL:-25}   # Length of focus lapse
BREAKL=${BREAKL:-5}  # Length of break lapse
LONGBL=${LONGBL:-15} # Length of long break lapse
#-----------------------------

USAGE="Usage: pmo [ACTION]

Action
  -                 Enter interactive mode
  s, start          Start pomodoro session
  n, next           Skip to next session/break
  l, last           Return to last session/break
  p, pause          Pause pomodoro session/break
  u, unpause        Unpause pomodoro session/break
  r, restart        Restart current session/brek
  e, end            End pomodoro session
  i, info           Info about pomodoro session
  w, wait MINUTES   Program pomodoro to start in MINUTES
  c, cancel         Cancel programmed pomodoro
  h, help           Print this help"
print_usage() { echo "$USAGE"; }

get_session() { sed -n 1p "$DB"; }
set_session() { sed -i '1s/.*/'"$1"'/' "$DB"; }
forward_sessions() { set_session $(($(get_session) + $1)); }
rollback_sessions() { set_session $(($(get_session) - $1)); }
get_bg_pids() { tail -n +2 "$DB"; }
set_bg_pid() { echo "$1" >>"$DB"; }
clean_bg_pid() { sed -i '2,$d' "$DB"; }

is_inactive() { [ "$(get_session)" -eq 0 ] || return 1; }
is_first_session() { [ "$(get_session)" -eq 1 ] || return 1; }
is_in_break() { [ $(($(get_session) % 2)) -eq 0 ] || return 1; }
is_in_long_break() { [ "$(get_session)" -eq $((POMOS * 2)) ] || return 1; }
is_in_last_session() { [ "$(get_session)" -eq $((POMOS * 2 - 1)) ] || return 1; }

nfy_ordinary() { nfy pmo "$1" -t 60000; }
nfy_critical() { nfy pmo "$1" -u critical -t 30000; }

sleepy() { sleep "${1}m"; }

remaining_sleep_time() {
	if [ -n "$1" ]; then
		ps -o etime= -o args= -p "$1" | perl -MPOSIX -lane '
      %map = qw(d 86400 h 3600 m 60 s 1);
      $F[0] =~ /(\d+-)?(\d+:)?(\d+):(\d+)/;
      $t = -($4+60*($3+60*($2+24*$1)));
      for (@F[2..$#F]) {
        s/\?//g;
        ($n, $p) = strtod($_);
        $n *= $map{substr($_, -$p)} if $p;
        $t += $n
      }
      print $t'
	else
		echo 0
	fi
}

start_work() {
	nfy_critical "Start work: ${WORKL} mins."
	sleepy "$WORKL"
	pmo next
}

start_break() {
	nfy_ordinary "Start break: ${BREAKL} mins."
	sleepy "$BREAKL"
	pmo next
}

start_long_break() {
	nfy_ordinary "Start long break: ${LONGBL} mins."
	sleepy "$LONGBL"
	pmo next
}

pause_pomo() {
	(get_bg_pid | xargs kill) >/dev/null 2>&1
	clean_bg_pid >/dev/null 2>&1
}

end_pomo() {
	pause_pomo
	nfy_critical "Finished"
	set_session 0
}

start_pomo() {
	pause_pomo
	set_session 1
	start_work &
	set_bg_pid "$!"
}

restart_pomo() {
	pause_pomo

	if is_first_session; then
		start_pomo
	else
		rollback_sessions 1
		pmo next
	fi
}

cancel_pomo() {
	pause_pomo

	set_session 0
}

last_pomo() {
	pause_pomo

	if is_first_session; then
		start_pomo
	else
		rollback_sessions 2
	fi

	pmo next
}

next_pomo() {
	pause_pomo

	if is_inactive; then
		start_pomo
	else
		if is_in_long_break; then
			end_pomo
		else
			if is_in_break; then
				start_work &
			else
				if is_in_last_session; then
					start_long_break &
				else
					start_break &
				fi
			fi

			set_bg_pid "$!"
			forward_sessions 1
		fi
	fi
}

info_pomo() {
	if is_inactive; then
		nfy_ordinary "No active session"
	else
		session="$(get_session)"
		elapsed="$(($(remaining_sleep_time "$(get_bg_pids)") / 60))"

		if is_in_long_break; then
			nfy_ordinary "Long break. $((LONGBL + elapsed))m remaining."
		else
			if is_in_break; then
				nfy_ordinary "Break $((session / 2)). $((BREAKL + elapsed))m remaining."
			else
				nfy_ordinary "Pomo $(((session + 1) / 2)). $((WORKL + elapsed))m remaining."
			fi
		fi
	fi
}

wait_pomo() {
	if [ -n "$1" ]; then
		(
			sleepy "$1"
			start_pomo
		) &
	else
		print_usage
	fi
}

if [ -z "$1" ]; then
	if action="$(nsl start pause unpause restart end next last info wait cancel)"; then
		pmo "$action"
		exit "$?"
	else
		exit 1
	fi
fi

case "$1" in
s | start) start_pomo ;;
n | next) next_pomo ;;
l | last) last_pomo ;;
p | pause) pause_pomo ;;
u | unpause) restart_pomo ;;
r | restart) restart_pomo ;;
e | end) end_pomo ;;
i | info) info_pomo ;;
w | wait) wait_pomo "$2" ;;
c | cancel) cancel_pomo ;;
h | help | *) print_usage ;;
esac
