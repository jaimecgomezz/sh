#!/usr/bin/env sh

#-----------------------------
# @jaimecgomezz
#
#
# Requires:
#   - nsl (custom)
#   - ntf (custom)
#------------------- protected
export PNAME="${PNAME:-$(ps --no-headers -o comm $PPID)}"
#------------------------ vars
DB="${HOME}/pomos"
CYCLES=${CYCLES:-4}  # Number of pomo cycles
POMOS=${POMOS:-4}    # Number of focus lapses
WORKL=${WORKL:-25}   # Length of focus lapse
BREAKL=${BREAKL:-5}  # Length of break lapse
LONGBL=${LONGBL:-15} # Length of long break lapse
#-----------------------------

USAGE="Usage: pmo [ACTION]

Action
  -                 Enter interactive mode
  s, start          Start pomodoro session
  n, next           Skip to next session/break
  l, last           Return to last session/break
  p, pause          Pause pomodoro session
  r, restart        Restart current session/brek
  e, end            End pomodoro session
  i, info           Info about pomodoro session
  w, wait MINUTES   Program pomodoro to start in MINUTES
  c, cancel         Cancel programmed pomodoro
  h, help           Print this help"
print_usage() { echo "$USAGE"; }

get_cycle() { sed -n 1p "$DB"; }
set_cycle() { sed -i '1s/.*/'"$1"'/' "$DB"; }
set_next_cycle() { set_cycle $(($(get_cycle) + 1)); }
set_previous_cycle() { set_cycle $(($(get_cycle) - 1)); }
get_session() { sed -n 2p "$DB"; }
set_session() { sed -i '2s/.*/'"$1"'/' "$DB"; }
set_next_session() { set_session $(($(get_session) + 1)); }
set_previous_session() { set_session $(($(get_session) - 1)); }
get_max_session() { echo $((POMOS * 2)); }
set_max_session() { set_session $((POMOS * 2)); }
get_bg_pid() { tail -n +3 "$DB"; }
set_bg_pid() { echo "$1" >>"$DB"; }
clean_bg_pid() { sed -i '3,$d' "$DB"; }

is_paused() { [ "$1" -eq 0 ] && true || false; }
is_inactive() { [ "$1" -eq 0 ] && true || false; }
is_in_break() { [ $((${1} % 2)) -eq 0 ] && true || false; }
is_in_long_break() { [ "$1" -eq $((POMOS * 2)) ] && true || false; }
is_in_last_cycle() { [ "$1" -eq "$CYCLES" ] && true || false; }
is_in_last_session() { [ "$1" -eq $((POMOS * 2 - 1)) ] && true || false; }
is_first_session() { [ "$1" -eq 1 ] && true || false; }
is_first_cycle() { [ "$1" -eq 1 ] && true || false; }

nfy_ordinary() { nfy pmo "$1" -t 60000; }
nfy_critical() { nfy pmo "$1" -u critical -t 30000; }

sleepy() { sleep $((${1} * 60)); }

start_work() {
	nfy_critical "Start work: ${WORKL} mins."
	sleepy "$WORKL"
	pmo next
}

start_break() {
	nfy_ordinary "Start break: ${BREAKL} mins."
	sleepy "$BREAKL"
	pmo next
}

start_long_break() {
	nfy_ordinary "Start long break: ${LONGBL} mins."
	sleepy "$LONGBL"
	pmo next
}

end_pomo() {
	pause_pomo
	nfy_critical "Finished"
	set_cycle 0
	set_session 0
}

start_pomo() {
	pause_pomo
	set_cycle 1
	set_session 1
	start_work &
	set_bg_pid "$!"
}

pause_pomo() {
	(get_bg_pid | xargs kill) >/dev/null 2>&1
	clean_bg_pid >/dev/null 2>&1
}

restart_pomo() {
	pause_pomo

	cycle="$(get_cycle)"
	session="$(get_session)"

	if is_first_session "$session"; then
		if is_first_cycle "$cycle"; then
			start_pomo
		else
			set_previous_cycle
			set_max_session
			pmo next
		fi
	else
		set_previous_session
		pmo next
	fi
}

last_pomo() {
	pause_pomo

	cycle="$(get_cycle)"
	session="$(get_session)"

	if [ "$session" -ge 2 ]; then
		set_session "$((session - 2))"
	else
		if is_first_cycle "$cycle"; then
			start_pomo
		else
			set_previous_cycle
			case "$session" in
			1) set_session "$(($(get_max_session) - 1))" ;;
			*) set_max_session ;;
			esac
		fi
	fi

	pmo next
}

next_pomo() {
	pause_pomo

	cycle="$(get_cycle)"
	session="$(get_session)"

	if is_inactive "$cycle"; then
		start_pomo
	else
		if is_in_long_break "$session"; then
			if is_in_last_cycle "$cycle"; then
				end_pomo
			else
				set_next_cycle
				set_session 1
				start_work &
				set_bg_pid "$!"
			fi
		else
			if is_in_break "$session"; then
				set_next_session
				start_work &
				set_bg_pid "$!"
			else
				if is_in_last_session "$session"; then
					set_next_session
					start_long_break &
					set_bg_pid "$!"
				else
					set_next_session
					start_break &
					set_bg_pid "$!"
				fi
			fi
		fi
	fi
}

info_pomo() {
	cycle="$(get_cycle)"
	session="$(get_session)"

	if is_inactive "$cycle"; then
		nfy_ordinary "No active session"
	else
		if is_in_long_break "$session"; then
			nfy_ordinary "Long break $cycle."
		else
			if is_in_break "$session"; then
				nfy_ordinary "Session $cycle. Break $((session / 2))."
			else
				nfy_ordinary "Session $cycle. Pomo $(((session + 1) / 2))."
			fi
		fi
	fi
}

wait_pomo() {
	if [ -n "$1" ]; then
		(
			sleepy "$1"
			start_pomo
		) &
		set_bg_pid "$!"
	else
		print_usage
	fi
}

if [ -z "$1" ]; then
	if action="$(nsl start pause restart end next last info wait cancel)"; then
		pmo "$action"
		exit "$?"
	else
		exit 1
	fi
fi

case "$1" in
s | start) start_pomo ;;
n | next) next_pomo ;;
l | last) last_pomo ;;
p | pause) pause_pomo ;;
r | restart) restart_pomo ;;
e | end) end_pomo ;;
i | info) info_pomo ;;
w | wait) wait_pomo "$2" ;;
c | cancel) pause_pomo ;;
h | help | *) print_usage ;;
esac
